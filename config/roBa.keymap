#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W  &kp E   &kp R          &kp T                                     &kp LS(F1)    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9    &lt 1 K_CALCULATOR
&kp TAB    &kp A  &kp S   &kp D          &kp F        &trans        &kp F9         &kp END       &kp NUMBER_4  &kp NUMBER_5  &lt 6 NUMBER_6  &kp F8
&kp LCTRL  &kp Z  &kp X   &kp C          &kp V        &mkp MB1      &kp BACKSPACE  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp DOT
&tog 0     &to 5  &tog 2  &lt 3 LS(TAB)  &lt 2 SPACE  &to 0         &kp ENTER      &lt 3 TAB                                                 &kp LS(LC(F2))
            >;

            sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };

        FUNCTION {
            bindings = <
&kp DLLR  &kp AMPS  &kp LPAR  &kp RPAR  &kp EQUAL                            &kp LC(HOME)   &kp F7  &kp F8  &kp F9  &trans
&trans    &trans    &kp LBRC  &kp RBRC  &kp DQT    &trans      &kp F11       &kp LC(END)    &kp F4  &kp F5  &kp F6  &kp F10
&trans    &kp LBKT  &kp LT    &kp GT    &kp SQT    &trans      &kp F12       &kp F10        &kp F1  &kp F2  &kp F3  &kp F11
&trans    &trans    &trans    &trans    &trans     &trans      &kp LC(LEFT)  &kp LC(RIGHT)                          &kp F12
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &mmv MOVE_X(600)  &mmv MOVE_X(200)  &mmv MOVE_X(100)  &mmv MOVE_UP    &mmv MOVE_Y(100)
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &kp UP            &trans            &mmv MOVE_LEFT    &mkp MB1        &mmv MOVE_RIGHT
&trans  &trans  &trans  &trans  &trans  &trans      &kp LEFT  &kp DOWN          &kp RIGHT         &trans            &mmv MOVE_DOWN  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans                                                                &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        NUM {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &kp T   &kp Y  &kp U  &kp I      &kp O
&trans  &trans  &trans  &trans  &trans  &trans        &kp P     &kp G   &kp H  &kp J  &kp K      &kp L
&trans  &trans  &trans  &trans  &trans  &kp INT4      &kp INT5  &kp B   &kp N  &kp M  &kp MINUS  &kp BACKSPACE
&trans  &trans  &trans  &trans  &trans  &trans        &trans    &trans                           &kp DELETE
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans           &trans    &trans     &trans    &kp LA(F4)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LC(LS(TAB))  &mkp MB1  &mkp MB3   &mkp MB2  &kp LC(TAB)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans           &trans    &kp LG(D)  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                          &trans
            >;
        };

        SCROLL {
            bindings = <
&kp Q             &kp W   &kp E   &kp R   &kp T                           &kp T   &kp Y  &kp U  &kp I      &kp O
&kp A             &kp A   &kp S   &kp D   &kp F   &trans        &kp P     &kp G   &kp H  &kp J  &kp K      &kp L
&kp LCTRL         &kp Z   &kp X   &kp C   &kp V   &kp INT4      &kp INT5  &kp B   &kp N  &kp M  &kp MINUS  &kp BACKSPACE
&kp LS(CAPSLOCK)  &trans  &trans  &trans  &trans  &trans        &trans    &trans                           &kp DELETE
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans           &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &bootloader      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans           &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
